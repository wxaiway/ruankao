/**
 * 案例分析数据文件 - 自动生成，请勿手动编辑
 * 生成时间: 2025/9/22 19:39:23
 */

import { CaseAnalysis } from '@/lib/answer-questions';

export const caseAnalysisData: CaseAnalysis[] = [
  {
    "id": "case001",
    "title": "软件架构质量属性场景分析",
    "type": "case-analysis",
    "content": "<h2>试题一：质量属性</h2>\n<p>阅读以下关于面向质量属性的软件架构设计的叙述，回答问题1和问题2。 【说明】 某公司拟开发一个基于大语言模型的智能系统，该系统将通过多个大语言模型来协作处理用户提交的任务请求，任务求解过程的状态数据将被记录在任务板中，各个大语言模型根据任务板上任务的实时求解状态，来确定它们当前是否需要被调用以进一步处理该任务，并在处理完成之后将任务的最新状态更新到任务板上。 基于该系统的开发任务，公司召开项目讨论会。会上，项目组介绍了系统需求，主要包括： （a）系统可支持用户在任务板上查看任务的状态和结果，并允许用户多次调用大型语言模型以进一步优化处理结果。 （b）系统可支持任务数据的导入导出，数据导入导出在1分钟内完成 （c）在数据服务器发生故障时，系统应能够立刻切换到备份服务器，并保证数据同步，以确保系统的不间断的服务。 （d）在系统正常负荷情况下，用户在任务板上查询任务状态和结果的响应时间应在2秒内。 （e）系统应确保用户数据和操作记录的安全，防止未经授权的访问。 （f）系统需要支持多语言接口，并提供查询词自动补全和搜索关联功能。 （g）系统应支持扩容，以容纳更多的用户和任务。扩容需求的实现应在两名运维人员工作的情况下在5天内完成。 （h）系统部署在云服务器上。当云服务器出现故障时，系统应在1分钟内检测出故障，并在1小时之内恢复。 （i）系统支持根据用户任务类型调用相应的大语言模型对任务进行处理。 （j）用户可以在任务板上搜索历史任务和结果，搜索结果应在3秒内返回。</p>\n<p><strong>【问题1】</strong>（14分） 为了辅助架构师张工完成系统架构设计，首先需要对上述需求进行分析。请分析需求（a）<del>（j），补充完善下表中（1）</del>（7）的空白处。</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/8oLl952owjMJ4lap/img/bff5b820-a047-4ad3-86ce-cf52f1ac95c8.png\" alt=\"image.png\"></p>\n<p><strong>【问题2】</strong>（11分） 针对需求可用性需求（h），张工提出可采用ping/echo策略完成故障检测，但李工认为从系统资源利用率的角度出发，采用心跳策略完成故障检测更优。 （1）请分别说明如何采用ping/echo策略和心跳策略来完成可用性的故障检测； （2）请解释李工认为心跳策略更优的原因。</p>\n<h3></h3>\n",
    "answer": {
      "content": "<h2>参考答案</h2>\n<p><strong>【问题1】</strong></p>\n<p>（1）性能</p>\n<p>（2）性能</p>\n<p>（3）安全性</p>\n<p>（4）功能性</p>\n<p>（5）可修改性</p>\n<p>（6）功能性</p>\n<p>（7）性能</p>\n<p><strong>【问题2】</strong></p>\n<p>（1）ping/echo策略通过定期发送ping请求并等待响应来检测故障，而心跳策略则是通过定期交换心跳消息来确认服务状态。</p>\n<p>（2）李工之所以认为心跳策略相较于ping/echo策略更为优越，是因为心跳策略能够显著减少资源的消耗，它通过被监控组件主动发送简短的心跳消息来表明运行状态，无需监控组件频繁发送请求并等待回应。此外，心跳策略还能有效降低网络的负载，因为心跳消息通常较短且发送频率较低，对网络带宽的占用也相应减少。最后，心跳策略能够更快速地检测到故障或失联的节点，一旦节点出现故障或无法发送心跳消息，监控组件便能立即察觉并采取措施，从而提高了故障检测的效率。</p>\n<p><strong>解析：</strong></p>\n<p>【问题2】</p>\n<p>（1）ping/echo故障检测：ping/echo通过发送ping请求报文给目标主机，并等待其回应来检测网络连通性。如果收到回应，则表明网络通路正常；如果未收到回应或超时，则可能表示网络存在问题或目标主机不可达。</p>\n<p>心跳故障检测：心跳机制通过节点间定期发送心跳信号来检测各节点的状态。如果连续一段时间内未收到某个节点的心跳信号，则判定该节点出现故障或失联，并触发相应的故障恢复或切换操作。这种方式常用于分布式系统中，以确保系统的高可靠性和稳定性。</p>\n<p>（2）资源消耗较少：心跳模式通常是由被监控组件主动、周期性地向监控组件发送简短的消息，以表明其正在正常运行。这种方式相比ping echo更为高效，因为ping echo需要监控组件定时向被监控组件发送请求，并等待回应，这增加了网络流量和处理器资源的消耗。另外心跳模式使用的是长连接，而ping使用的是短连接。</p>\n<p>降低网络负载：由于心跳消息通常较短且发送频率相对较低（根据系统需求设定），因此它们对网络带宽的占用较少。相比之下，ping echo可能需要更频繁地发送和接收消息，从而增加了网络的负载。</p>\n<p>故障检测效率更快：心跳模式能够更快速地检测到故障或失联的节点。因为心跳消息是周期性发送的，所以一旦某个节点出现故障或无法发送心跳消息，监控组件就能立即察觉并采取相应的措施。而ping/echo虽然也能用于故障检测，但其响应时间和检测效率可能受到网络延迟和消息丢失等因素的影响。</p>\n<h2>详细解析</h2>\n<p>**</p>\n<p>【问题2】</p>\n<p>（1）ping/echo故障检测：ping/echo通过发送ping请求报文给目标主机，并等待其回应来检测网络连通性。如果收到回应，则表明网络通路正常；如果未收到回应或超时，则可能表示网络存在问题或目标主机不可达。</p>\n<p>心跳故障检测：心跳机制通过节点间定期发送心跳信号来检测各节点的状态。如果连续一段时间内未收到某个节点的心跳信号，则判定该节点出现故障或失联，并触发相应的故障恢复或切换操作。这种方式常用于分布式系统中，以确保系统的高可靠性和稳定性。</p>\n<p>（2）资源消耗较少：心跳模式通常是由被监控组件主动、周期性地向监控组件发送简短的消息，以表明其正在正常运行。这种方式相比ping echo更为高效，因为ping echo需要监控组件定时向被监控组件发送请求，并等待回应，这增加了网络流量和处理器资源的消耗。另外心跳模式使用的是长连接，而ping使用的是短连接。</p>\n<p>降低网络负载：由于心跳消息通常较短且发送频率相对较低（根据系统需求设定），因此它们对网络带宽的占用较少。相比之下，ping echo可能需要更频繁地发送和接收消息，从而增加了网络的负载。</p>\n<p>故障检测效率更快：心跳模式能够更快速地检测到故障或失联的节点。因为心跳消息是周期性发送的，所以一旦某个节点出现故障或无法发送心跳消息，监控组件就能立即察觉并采取相应的措施。而ping/echo虽然也能用于故障检测，但其响应时间和检测效率可能受到网络延迟和消息丢失等因素的影响。</p>\n",
      "keyPoints": [
        "理解题目中的核心技术概念",
        "掌握相关架构设计原理",
        "能够分析实际应用场景"
      ],
      "gradingRubric": [],
      "references": []
    },
    "tags": {
      "chapter": "2024-2",
      "difficulty": "hard",
      "domains": [
        "软件架构",
        "系统设计"
      ],
      "keywords": [
        "质量属性",
        "软件架构",
        "场景分析",
        "ATAM"
      ]
    },
    "estimatedTime": 45,
    "images": []
  },
  {
    "id": "case002",
    "title": "数据库cache-aside架构设计",
    "type": "case-analysis",
    "content": "<h2>试题二：数据库cache-aside架构</h2>\n<p>阅读下列关于数据库设计的说明，回答问题1至问题3。<br>【说明】<br>为了提升某购物网站的用户使用体验，采用数据库缓存技术将经常访问的商品信息存储在一个临时高速数据存储层中，这个临时存储层使得未来对这些数据的请求响应比通过访问主数据库更快。为了确保快速、及时获取最新数据，项目组决定采用缓存数据技术开展项目设计，经讨论，决定采用Cache-Aside策略作为缓存手段。</p>\n<p><strong>【问题1】</strong>（10分）<br>使用Cache-Aside缓存策略，当用户查询商品信息时，此请求会从应用程序服务器发送请求到数据库服务器，通过缓存系统处理，然后返回所请求的信息，请补充完善图1中（1）~（5）处的内容，协助设计师完成缓存系统中的数据读取模块的设计方案。<br><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/8oLl952owjMJ4lap/img/360a6c9c-284c-443c-8c0e-69ea350791d7.png\" alt=\"image.png\"></p>\n<p><strong>【问题2】</strong>（6分）<br>使用Cache-Aside缓存策略，当用户更新商品信息时，此请求会从应用服务器发至数据库服务器，并进行缓存处理，请补充完善图2中（1）和（2）处的内容，协助工程师完成缓存系统中的数据更新模块的设计方案。<br><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/8oLl952owjMJ4lap/img/1025fb19-549e-446c-a4b9-bd421affc0ef.png\" alt=\"image.png\"></p>\n<p><strong>【问题3】</strong>（9分）<br>李工设计了多线程并发数据访问方案，采用线程1执行数据更新，线程2执行数据读取。王工认为这样的设计方案会存在数据不一致现象，请说明李工所设计的方案为什么会出现数据库与缓存中的数据不一致的情况，并给出3种或以上的解决方案。  </p>\n<h3></h3>\n",
    "answer": {
      "content": "<h2>参考答案</h2>\n<p><strong>【问题1】</strong><br>（1）向缓存请求读取该商品信息<br>（2）若命中则返回该商品信息<br>（3）若未命中则访问数据库查询该商品信息<br>（4）将查询到的数据库数据更新到缓存<br>（5）将查询到的数据库目标数据返回<br><strong>【问题2】</strong><br>（1）更新数据库中的目标商品信息<br>（2）删除对应商品的缓存信息<br><strong>【问题3】</strong></p>\n<p><strong>原因：</strong></p>\n<p><strong>（1）非原子操作</strong>：【更新DB -&gt; 删除Cache】不是一个原子操作，中间可被其他线程打断。</p>\n<p><strong>（2）执行顺序不确定性</strong>：并发环境下，【读操作】和【写操作】的各个步骤（读DB、读Cache、写DB、写Cache）可以任意交错执行。</p>\n<p><strong>解决方案：</strong><br>（1）异步队列方式同步，可采用消息中间件处理</p>\n<p>（2）通过数据库插件完成数据同步</p>\n<p>（3）利用触发器进行缓存同步</p>\n<p>（4）锁机制</p>\n<p>（5）延时双删</p>\n<p>（6）设置缓存过期策略</p>\n<p>（7）订阅Binlog进行失效</p>\n<p>注意：该题的答案并不唯一，能写出三种合理的方案即可，使用Qwen和DeepSeek多学习下。</p>\n<p><strong>解析：</strong></p>\n<p>针对线程1写数据、线程2读缓存时可能出现的数据不一致问题，以下是三种解决方案的详细解析：<br>（1）异步队列方式同步，可采用消息中间件处理：此方案利用消息中间件（如Kafka）来确保数据的一致性。当线程1更新数据库后，会发送一个消息到消息队列中。线程2或另一个消费者线程会监听这个队列，并在收到消息后执行相应的缓存更新或删除操作。<br>（2）通过数据库插件完成数据同步：一些数据库插件或工具（如MySQL的binlog监听工具）可以监听数据库的更新操作，并在数据发生变化时自动更新缓存。<br>（3）利用触发器进行缓存同步：在数据库中设置触发器，当数据表发生INSERT、UPDATE或DELETE操作时，触发器会自动执行相应的缓存更新或删除操作。</p>\n<p>（4）锁机制。比如：通过引入读写锁机制，可以确保在数据更新时，没有其他线程可以读取数据。这可以防止线程2在线程1更新数据库时读取到旧数据。在数据更新完成后，再释放读锁，允许其他线程读取数据。</p>\n<h2>详细解析</h2>\n<p>**</p>\n<p>针对线程1写数据、线程2读缓存时可能出现的数据不一致问题，以下是三种解决方案的详细解析：<br>（1）异步队列方式同步，可采用消息中间件处理：此方案利用消息中间件（如Kafka）来确保数据的一致性。当线程1更新数据库后，会发送一个消息到消息队列中。线程2或另一个消费者线程会监听这个队列，并在收到消息后执行相应的缓存更新或删除操作。<br>（2）通过数据库插件完成数据同步：一些数据库插件或工具（如MySQL的binlog监听工具）可以监听数据库的更新操作，并在数据发生变化时自动更新缓存。<br>（3）利用触发器进行缓存同步：在数据库中设置触发器，当数据表发生INSERT、UPDATE或DELETE操作时，触发器会自动执行相应的缓存更新或删除操作。</p>\n<p>（4）锁机制。比如：通过引入读写锁机制，可以确保在数据更新时，没有其他线程可以读取数据。这可以防止线程2在线程1更新数据库时读取到旧数据。在数据更新完成后，再释放读锁，允许其他线程读取数据。</p>\n",
      "keyPoints": [
        "理解题目中的核心技术概念",
        "掌握相关架构设计原理",
        "能够分析实际应用场景"
      ],
      "gradingRubric": [],
      "references": []
    },
    "tags": {
      "chapter": "2024-2",
      "difficulty": "medium",
      "domains": [
        "数据库系统",
        "系统架构"
      ],
      "keywords": [
        "缓存架构",
        "cache-aside",
        "数据库设计"
      ]
    },
    "estimatedTime": 40,
    "images": []
  },
  {
    "id": "case003",
    "title": "ROS机器人操作系统分析",
    "type": "case-analysis",
    "content": "<h2>试题三：嵌入式</h2>\n<p>机器人操作系统ROS<br>【问题1】（12分）</p>\n<p>(1) ROS定义和特点。</p>\n<p>(2) ROS2与ROS1相比哪些地方做了改进？</p>\n<p>【问题2】（8分）</p>\n<p>四种通信服务选词填空。</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/8oLl952owjMJ4lap/img/6505d58a-1543-45bb-acdd-c77de04ba672.png\" alt=\"image.png\"></p>\n<p>【问题3】（5分）</p>\n<p>根据下图，请解释ROS2架构每一层含义。</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/8oLl952owjMJ4lap/img/a22bf565-1934-41c3-b916-43b86667c00e.png\" alt=\"image.png\">  </p>\n<h3></h3>\n",
    "answer": {
      "content": "<h2>参考答案</h2>\n<p><strong>【问题1】</strong></p>\n<p>**定义：**ROS（Robot Operating System），即机器人操作系统，是专为机器人软件开发所设计出来的一套电脑操作系统架构。它是一个开源的元级操作系统（或称为后操作系统），提供类似于操作系统的服务，包括硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间消息传递、程序发行包管理等。ROS还提供了一些工具和库，用于获取、建立、编写和执行多机融合的程序。</p>\n<p><strong>特点：</strong></p>\n<p>（1）点对点的设计：ROS采用了点对点的软件架构，使得各个功能模块（节点）可以分布在不同的主机上，并通过发布/订阅机制进行通信。这种设计提高了系统的灵活性和可扩展性。</p>\n<p>（2）多语言支持：ROS支持多种编程语言，如Python、C++、Java、Octave和LISP等，这使得开发者可以根据自己的需求和擅长选择合适的语言进行开发。</p>\n<p>（3）架构精简、集成度高：ROS框架具有模块化特点，每个功能节点可以进行单独编译，并使用统一的消息接口，使得模块的移植和复用更加便捷。同时，ROS开源社区中移植、集成了大量的已有开源项目中的代码，如OpenCV、PCL等。</p>\n<p>（4）提供丰富的工具和库：ROS提供了大量的工具和库，如roscpp、rospy等，用于实现自主移动、操作物体、感知环境等功能。这些工具和库极大地简化了机器人软件的开发过程。</p>\n<p>（5）强大的生态系统和社区支持：ROS的支持与发展构成了一个强大的生态系统。官方网站（<a href=\"http://www.ros.org%EF%BC%89%E6%8F%90%E4%BE%9B%E4%BA%86%E5%90%84%E7%A7%8D%E6%94%AF%E6%8C%81%E6%96%87%E6%A1%A3%E5%92%8C%E5%BC%80%E6%BA%90%E7%A8%8B%E5%BA%8F%E5%8C%85%EF%BC%8C%E4%BD%BF%E5%BE%97%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%E5%B9%B6%E5%AD%A6%E4%B9%A0%E5%85%A8%E7%90%83%E5%BC%80%E5%8F%91%E8%80%85%E5%85%B1%E4%BA%AB%E7%9A%84%E8%B5%84%E6%BA%90%E5%92%8C%E7%BB%8F%E9%AA%8C%E3%80%82%E6%AD%A4%E5%A4%96%EF%BC%8CROS%E7%A4%BE%E5%8C%BA%E4%B9%9F%E9%9D%9E%E5%B8%B8%E6%B4%BB%E8%B7%83%EF%BC%8C%E5%BC%80%E5%8F%91%E8%80%85%E5%8F%AF%E4%BB%A5%E5%9C%A8%E7%A4%BE%E5%8C%BA%E4%B8%AD%E4%BA%A4%E6%B5%81%E5%BF%83%E5%BE%97%E3%80%81%E5%88%86%E4%BA%AB%E7%BB%8F%E9%AA%8C%E5%B9%B6%E8%8E%B7%E5%8F%96%E5%B8%AE%E5%8A%A9%E3%80%82\">www.ros.org）提供了各种支持文档和开源程序包，使得用户可以搜索并学习全球开发者共享的资源和经验。此外，ROS社区也非常活跃，开发者可以在社区中交流心得、分享经验并获取帮助。</a></p>\n<p><strong>主要改进点：</strong></p>\n<ul>\n<li><p>通信机制：ROS1使用基于TCP/IP的自定义协议（TCPROS/UDPROS），而ROS2则采用了DDS（Data Distribution Service）作为通信中间件。DDS支持去中心化的发布/订阅模型，提高了系统的可靠性和稳定性。</p>\n</li>\n<li><p>支持平台：ROS1主要支持Linux系统，而ROS2则扩展到了Windows、macOS以及RTOS等多个操作系统，提供了更广阔的开发空间。</p>\n</li>\n<li><p>实时性：ROS2在实时性方面进行了优化，包括引入更高效的通信机制和减少系统开销等，使得ROS2在实时性方面有了显著提升。</p>\n</li>\n<li><p>安全性：ROS2加强了安全性方面的考虑，引入了加密机制等安全措施，提高了机器人在网络通信中的安全性。</p>\n</li>\n<li><p>数据类型和序列化：ROS2使用了DDS的数据类型系统（IDL定义），支持更复杂的数据结构和数据类型，包括嵌套结构、枚举类型和位字段等。</p>\n</li>\n<li><p>节点组织：在ROS2中，节点可以是独立的进程，也可以是共享同一进程的多个节点。这种设计减少了进程间通信的开销，提高了效率。</p>\n</li>\n</ul>\n<p><strong>【问题2】</strong></p>\n<p>1.话题通信：是一种<strong>单向通信</strong>模型，在通信双方中，发布方发布数据，订阅方订阅数据，数据流单向的由发布方传输到订阅方。</p>\n<p>2.服务通信：是一种<strong>基于请求响应</strong>的通信模型，在通信双方中，客户端发送请求数据到服务端，服务端响应结果给客户端。</p>\n<p>3.动作通信：是一种带有<strong>连续反馈</strong>的通信模型，在通信双方中，客户端发送请求数据到服务端，服务端响应结果给客户端，但是在服务端接收到请求到产生最终响应的过程中，会发送中间连续的反馈（进度）信息到客户端。</p>\n<p>4.参数服务：是一种<strong>基于共享</strong>的通信模型，在通信双方中，服务端可以设置数据，而客户端可以连接服务端并操作服务端数据。</p>\n<p><strong>【问题3】</strong></p>\n<p>1. 操作系统层（OS Layer）：提供基础运行环境，支持 ROS 2 在 Linux、Windows、macOS 等操作系统上运行，负责硬件驱动、进程管理和网络通信。</p>\n<p>2. DDS实现层（DDS Implementation Layer）：ROS 2 的底层通信引擎，基于 DDS（数据分发服务） 协议实现节点间的数据传输。默认使用 eProsima Fast DDS 或 Cyclone DDS，支持去中心化通信、QoS 配置和多协议传输（如 UDP/TCP）。</p>\n<p>3. 抽象DDS层（RMW Layer）：ROS Middleware Interface（RMW） 是 DDS 的抽象接口层，屏蔽不同 DDS 实现的差异。上层通过统一的 rmw_publish、rmw_subscribe 等接口调用 DDS 功能，支持切换不同的 DDS 中间件（如 Fast DDS、Cyclone DDS）。</p>\n<p>4. ROS客户端库层（RCL Layer）：提供开发者直接使用的 API，如 rclcpp（C++）、rclpy（Python），封装话题、服务、动作、参数等通信功能。通过调用 RMW 层接口，实现与底层 DDS 的解耦。</p>\n<p>5. 应用层（Application Layer）：开发者编写机器人功能代码的层级，通过 ROS 2 节点（Node）实现具体功能（如传感器控制、路径规划）。节点通过 RCL 调用通信接口，无需直接处理底层通信细节。</p>\n<p>ROS 2 架构通过分层设计，将通信功能从应用逻辑中解耦，底层依赖 DDS 实现高效通信，中间层（RMW/RCL）抽象接口，上层开发者专注业务逻辑。这种设计兼顾灵活性（支持多 DDS 实现）和易用性（屏蔽底层复杂性）。</p>\n",
      "keyPoints": [
        "理解题目中的核心技术概念",
        "掌握相关架构设计原理",
        "能够分析实际应用场景"
      ],
      "gradingRubric": [],
      "references": []
    },
    "tags": {
      "chapter": "2024-2",
      "difficulty": "hard",
      "domains": [
        "嵌入式系统",
        "机器人技术"
      ],
      "keywords": [
        "ROS",
        "机器人系统",
        "嵌入式系统"
      ]
    },
    "estimatedTime": 45,
    "images": []
  },
  {
    "id": "case004",
    "title": "Elasticsearch分词系统设计",
    "type": "case-analysis",
    "content": "<h2>试题四：Web应用</h2>\n<p>Web Elasticsearch分词的商品推荐系统（微信小程序接入）</p>\n<p>【问题1】Standard, Simple, Whitespace, Keyword分词引擎的特点差异（几种分词器怎么分词）（6分）</p>\n<p>【问题2】系统架构图填空，从给出的选项中选出对应的选项填入对的位置。（12分） 分层：接入层、显示层、网络层、应用层、业务逻辑层、控制层、数据层。 技术：Mybatis、 Nginx、 Flink、 Javascript、 Node js、 RESTful、 Elasticsearch、Kafka</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/8oLl952owjMJ4lap/img/52c2178b-b78b-4062-af29-97e2a39435e5.png\" alt=\"image.png\"></p>\n<p>【问题3】RESTful 架构有什么特点，是如何实现前后端分离的。（7分）</p>\n<h3></h3>\n",
    "answer": {
      "content": "<h2>参考答案</h2>\n<p>【问题1】</p>\n<p>1.Standard分词器：特点：是默认的分词器，对于英文，它按照单词进行切分，并将大写字母转换为小写；对于中文，则简单地将中文文本拆分为单个汉字。</p>\n<p>2.Simple分词器：特点：按照非字母字符（如标点符号、数字、特殊字符等）进行切分，同时会将大写字母转换为小写，并过滤掉这些非字母字符。</p>\n<p>3.Whitespace分词器：特点：仅仅按照空白字符（如空格、制表符等）进行切分，不会进行小写转换，也不会过滤掉任何字符（包括标点符号和数字）。</p>\n<p>4.Keyword分词器：特点：不进行任何切分，将输入的整个字符串作为一个单独的词（或称为“关键词”）来处理。</p>\n<p>【问题2】题目出自ProcessOn的模版，不是很严谨。</p>\n<p>（1）显示层 （2）控制层 （3）Javascript （4）Restful （5）业务逻辑层</p>\n<p>（6）数据层 （7）MyBatis （8）Nginx</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/8oLl952owjMJ4lap/img/2ee6c1c2-2401-4c0c-bb9a-6a9668f3ae36.png\" alt=\"image.png\"></p>\n<p>【问题3】</p>\n<p>RESTful架构通过定义一套规范来实现前后端分离。以下是实现前后端分离的关键点：</p>\n<p>（1）资源定义与URL规范：在RESTful架构中，每种URL代表一种资源。通过不同的HTTP请求方法（如GET、POST、PUT、DELETE）对同一URL进行操作，可以实现对该资源的不同功能，如获取、添加、修改和删除。</p>\n<p>（2）请求方式与响应格式：客户端使用标准的HTTP方法（GET、POST、PUT、DELETE）对服务器上的资源进行操作。服务器响应通常以JSON格式返回数据，这样前端可以轻松地解析和处理这些数据。</p>\n<p>（3）前后端职责分离：前端主要负责用户界面与用户体验，包括页面展示、渲染速率和效果。前端通过发送Ajax请求与后端进行交互，并接收JSON格式的数据进行展示。后端专注于业务逻辑处理与数据存储。后端接收前端的请求，处理业务逻辑，然后返回相应的数据给前端。</p>\n<p>（4）前后端交互规范：前后端通过RESTful规范进行数据交互。这意味着双方需要遵循相同的接口定义、请求方法和响应格式。这种规范使得前后端可以独立开发和维护，提高了团队的协作效率和系统的可扩展性。</p>\n",
      "keyPoints": [
        "理解题目中的核心技术概念",
        "掌握相关架构设计原理",
        "能够分析实际应用场景"
      ],
      "gradingRubric": [],
      "references": []
    },
    "tags": {
      "chapter": "2024-2",
      "difficulty": "medium",
      "domains": [
        "搜索技术",
        "Web应用"
      ],
      "keywords": [
        "Elasticsearch",
        "分词",
        "搜索引擎"
      ]
    },
    "estimatedTime": 40,
    "images": []
  },
  {
    "id": "case005",
    "title": "医用血糖监测系统安全分析",
    "type": "case-analysis",
    "content": "<h2>试题五：软件开发</h2>\n<p>医用血糖监测系统：【题目不太准确，仅会意】，大体是说有一个打胰岛素泵的系统，首先通过血糖仪测量的数据， 然后自动计算出要使用的胰岛素剂量，再通过这个泵系统自动去打胰岛素给病人。</p>\n<p>【问题1】危险驱动的安全分析的4个步骤，并简要说明。(10分)</p>\n<p>【问题2】胰岛素系统，填空题(9分) </p>\n<p>选项：</p>\n<p>①泵信号失效      ②定时器失效           ③算法错误</p>\n<p>④血糖传感器错误          ⑤胰岛素计算错误          ⑥血糖计算不准</p>\n<p>⑦传感系统异常              ⑧错误时间推送预定的量       ⑨计算错误</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/8oLl952owjMJ4lap/img/3b20af3a-edbe-4b75-83db-3e770e0ce362.png\" alt=\"image.png\"></p>\n<p>【问题3】形式化开发和软件测试技术的特点。(6分) </p>\n<h3></h3>\n",
    "answer": {
      "content": "<h2>参考答案</h2>\n<p>【问题1】危险驱动的安全分析的四个步骤包括：</p>\n<ul>\n<li><p>明确分析目的和系统边界</p>\n</li>\n<li><p>威胁识别与分类</p>\n</li>\n<li><p>构建控制模型和识别不安全行为</p>\n</li>\n<li><p>风险分析与控制措施实施</p>\n</li>\n</ul>\n<p>【问题2】</p>\n<p>备注：感觉出自某个教材，但没找到出处。</p>\n<p>关键词：Fault Tree Analysis — Insulin Delivery System</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/8oLl952owjMJ4lap/img/88d12f3a-0a80-409b-807d-b3d39c86350b.png\" alt=\"image.png\"></p>\n<p>以下答案不用深究，题目现在都没有确定。</p>\n<p>（1）错误时间推送预定的量</p>\n<p>（2）传感系统异常</p>\n<p>（3）定时器失效</p>\n<p>（4）泵信号失效</p>\n<p>（5）胰岛素计算错误</p>\n<p>（6）算法错误</p>\n<p>（7）计算错误</p>\n<p>（8）血糖传感器错误</p>\n<p>（9）血糖计算不准</p>\n<p>【问题3】</p>\n<p><strong>形式化开发特点：</strong>    </p>\n<ul>\n<li><p>数学基础：形式化开发方法基于数学原理，使用形式化语言来描述系统需求和设计，使得开发过程更加严谨和精确。</p>\n</li>\n<li><p>严格性：形式化方法要求对系统行为的每一个细节都进行明确的定义，减少歧义性。</p>\n</li>\n<li><p>可验证性：由于使用了数学化的描述，形式化开发的结果可以进行逻辑上的证明，确保系统满足预定的规格说明。</p>\n</li>\n<li><p>抽象层次：形式化方法通常涉及不同层次的抽象，从高级的需求规范到低级的实现细节。</p>\n</li>\n<li><p>自动化支持：形式化方法可以更容易地与自动化工具结合，例如模型检查器和定理证明器。</p>\n</li>\n<li><p>高成本：形式化开发通常需要高度专业化的知识和技能，因此成本较高，且不适合所有项目。</p>\n</li>\n</ul>\n<p><strong>软件测试技术特点：</strong></p>\n<ul>\n<li><p>验证和确认：软件测试旨在验证软件是否满足规定的需求，并确认软件是否按照预期工作。</p>\n</li>\n<li><p>多样性：测试技术多样，包括单元测试、集成测试、系统测试、验收测试等，每种测试针对不同层次的问题。</p>\n</li>\n<li><p>迭代过程：软件测试是一个迭代的过程，随着软件的开发和需求的变更，测试也需要不断进行和调整 。</p>\n</li>\n<li><p>人为因素：测试很大程度上依赖于测试人员的经验、知识和创造力，因此具有一定的主观性。</p>\n</li>\n<li><p>成本效益：测试可以发现缺陷并指导修复，从而减少软件发布后的问题，具有较好的成本效益 。</p>\n</li>\n<li><p>无法完全保证质量：由于测试的局限性，如测试用例的覆盖率问题，无法保证测试能够发现所有的缺陷。</p>\n</li>\n<li><p>测试工具：现代测试技术往往依赖于自动化测试工具，这些工具可以提高测试效率和准确性。</p>\n</li>\n<li><p>持续集成：在敏捷开发实践中，软件测试通常与持续集成相结合，确保代码的持续质量和稳定性 。</p>\n</li>\n</ul>\n<p><strong>总结：</strong></p>\n<p>形式化开发强调的是开发过程的严谨性和可证明性，而软件测试技术则更侧重于通过实际的运行来发现和修正软件中的缺陷。两者可以互补，共同提高软件的质量。</p>\n",
      "keyPoints": [
        "理解题目中的核心技术概念",
        "掌握相关架构设计原理",
        "能够分析实际应用场景"
      ],
      "gradingRubric": [],
      "references": []
    },
    "tags": {
      "chapter": "2024-2",
      "difficulty": "hard",
      "domains": [
        "医疗信息系统",
        "信息安全"
      ],
      "keywords": [
        "医疗系统",
        "安全分析",
        "嵌入式安全"
      ]
    },
    "estimatedTime": 45,
    "images": []
  },
  {
    "id": "case006",
    "title": "大模型训练平台架构设计",
    "type": "case-analysis",
    "content": "<h2>试题一：大模型训练系统</h2>\n<p>某公司开发一个在线大模型训练平台，支持 Python 代码编写、模型训练和部署，用户通过 python 编写模型代码，将代码交给系统进行模型代码的解析，最终由系统匹配相应的计算机资源进行输出，用户不需要关心底层硬件平台，在开发该平台架构时，设计了以下质量属性场景：</p>\n<ol>\n<li><p>当系统发生错误，在不影响正常运行时，自动发送一个错误通知给系统管理员</p>\n</li>\n<li><p>为方便用户操作，平台设计了满足一般用户使用的快捷键设置</p>\n</li>\n<li><p>系统界面能够适配用户自身使用的设备的屏幕尺寸比例</p>\n</li>\n<li><p>用户提交训练任务时平台应该在一分钟内提供硬件和资源来执行任务</p>\n</li>\n<li><p>当平台数据库发生故障时，可以在20 分钟内切换到备用库</p>\n</li>\n<li><p>系统发生故障时，要能提供操作日志、调试日志等记录便于追踪审计</p>\n</li>\n<li><p>系统发生故障时应在15分钟内修复</p>\n</li>\n<li><p>系统应能提供远程测试，供远程用户进行远程修改，该功能仅提供给系统注册用户使用</p>\n</li>\n<li><p>系统支持对某服务功能进行扩展，修改操作应该在3 天内完成</p>\n</li>\n<li><p>系统支持多个国家的语言，并且能够一键切换不同的语言</p>\n</li>\n<li><p>系统编写有专门的接口代码来接收用户编写的模型并向计算机资源进行输出</p>\n</li>\n<li><p>当使用平台的用户数量增加时，平台能够自动扩容以维持高质量服务</p>\n</li>\n</ol>\n<p><strong>问题1</strong>（12分）：写出题目中的 a-l 共12个场景对应的质量属性分别是什么？</p>\n<p><strong>问题2:</strong></p>\n<ol>\n<li><p>根据题目描述，完成下列解释器风格架构图的填空。6分</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/yBRq1ZPjkr7PKOdv/img/b3c282f2-6f0d-4b09-9e18-296bb74737b3.png\" alt=\"image.png\"></p>\n</li>\n<li><p>请简要说明该平台为什么适合用解释器风格？7分</p>\n</li>\n</ol>\n<h3></h3>\n",
    "answer": {
      "content": "<h2>参考答案</h2>\n<p><strong>问题1：</strong></p>\n<ol>\n<li><p>可维护性；</p>\n</li>\n<li><p>易用性；</p>\n</li>\n<li><p>易用性；</p>\n</li>\n<li><p>性能;</p>\n</li>\n<li><p>可用性;</p>\n</li>\n<li><p>安全性;</p>\n</li>\n<li><p>可用性;</p>\n</li>\n<li><p>可测试性;</p>\n</li>\n<li><p>可修改性;</p>\n</li>\n<li><p>易用性;</p>\n</li>\n<li><p>互操作性;</p>\n</li>\n<li><p>可伸缩性;</p>\n</li>\n</ol>\n<p><strong>问题2：</strong></p>\n<p>1.（1）程序执行的当前状态（2）解释器引擎（3）解释器引擎的内部状态</p>\n<ol start=\"2\">\n<li>本题主要采分点在于回答出解释器风格的优点，即：</li>\n</ol>\n<p>解释器风格可以构建一个运行环境，在这个环境上，可以解释和执行自定的一些语言和规则，题目中用户通过 python 编写模型代码，交由系统进行解析执行，正好是符合解释器模型的应用范围。</p>\n",
      "keyPoints": [
        "理解题目中的核心技术概念",
        "掌握相关架构设计原理",
        "能够分析实际应用场景"
      ],
      "gradingRubric": [],
      "references": []
    },
    "tags": {
      "chapter": "2025-1",
      "difficulty": "hard",
      "domains": [
        "人工智能",
        "软件架构"
      ],
      "keywords": [
        "大模型",
        "训练平台",
        "质量属性场景",
        "解释器架构"
      ]
    },
    "estimatedTime": 50,
    "images": []
  },
  {
    "id": "case007",
    "title": "医药知识图谱智能问答系统",
    "type": "case-analysis",
    "content": "<h2>试题二：医院知识图谱</h2>\n<p>某公司拟开发一个医药领域的智能问答系统，以帮助用户快速准确的获取疾病病因、治疗方式、治疗周期、常用药物、症状表现和药物企业等医药领域信息。</p>\n<p>基于项目需求，公司召开了项目讨论会。会上，张工指出基于关键词的中心化检索技术已无法满足用户获取医药领域信息的需求，应从各种医药信息网站网页数据中爬取数据构建医药领域知识图谱，并基于知识图谱实现信息的查询和智能问答。</p>\n<p><strong>问题1</strong>：医药知识图谱智能问答系统架构图（图为回忆版）填空，从以下选项中选择合适的选项填入图中空（1）—（9）</p>\n<p>可选项：（9分）</p>\n<p>（1）网络层（2）数据层（3）业务层（4）知识层</p>\n<p>（5)  关系获取（6）实体获取（7）网页采集（8）知识管理</p>\n<p>（9）知识清洗（10）数据清洗 （11）结构化数据（12）数据收集</p>\n<p>（13）语句解析（14）意图识别（15）知识检索（16）知识抽取</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/yBRq1ZPjkr7PKOdv/img/a980ba33-c307-45d5-82ee-b7235fc4d141.png\" alt=\"image.png\"></p>\n<p>**问题2：**该知识图谱的实现使用了爬虫框架 scrapy，该框架图如下所示，请填写图中空（1）-（3)（3分）并解释异步IO的特点和优势（7分）。</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/yBRq1ZPjkr7PKOdv/img/ea516ee8-5286-460e-a2f7-8cb1d08cce8b.png\" alt=\"image.png\"></p>\n<p><strong>问题3</strong>：请说一下知识图谱的构建和智能问答如何存储实现。（6分）</p>\n<h3></h3>\n",
    "answer": {
      "content": "<h2>参考答案</h2>\n<p><strong>问题1：</strong>（1）结构化数据 （2）数据收集（3）数据清洗</p>\n<p>（4）知识管理 （5）知识层（6）知识检索</p>\n<p>（7） 意图识别 （8）语句解析（9）知识抽取 （10）业务层</p>\n<p><strong>问题2：</strong>(1) scheduler   (2) scrapy engine (3) ltem Pipeline</p>\n<p>异步 I/O 的核心特点是<strong>非阻塞</strong>和<strong>事件驱动</strong>。其核心优势在于：</p>\n<ol>\n<li><p><strong>高并发</strong>：单线程即可处理海量连接。</p>\n</li>\n<li><p><strong>高性能与高吞吐量</strong>：极大减少了线程阻塞和上下文切换的开销，资源利用率极高。</p>\n</li>\n<li><p><strong>低资源开销</strong>：避免了创建大量线程所需的内存和CPU成本。</p>\n</li>\n</ol>\n<p><strong>问题3：</strong></p>\n<ul>\n<li><p><strong>存储模型</strong>：最常用的是<strong>图数据库</strong>，因为它能最直观地表示“实体-关系-实体”的三元组结构。</p>\n</li>\n<li><p><strong>常用数据库</strong>：<strong>Neo4j</strong>（最流行）、<strong>Nebula Graph</strong>（国产开源）、<strong>JanusGraph</strong>、<strong>TigerGraph</strong>等。有时也会使用<strong>RDF三元组库</strong>（如Jena）或甚至适配后的关系数据库。</p>\n</li>\n<li><p>简单来说，<strong>构建知识图谱是“写”入知识，而智能问答是“读”出知识</strong>。两者通过<strong>图数据库</strong>这一核心存储与查询引擎紧密相连。</p>\n</li>\n<li><p>备选：问答（RAG）使用向量数据库？</p>\n</li>\n</ul>\n<p><strong>解析：</strong></p>\n<p>类似的原文：图3-2</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/yBRq1ZPjkr7PKOdv/img/b962dd30-be99-44b4-aa87-574cee6e360e.png\" alt=\"image.png\"></p>\n<p><a href=\"https://alidocs.dingtalk.com/i/nodes/93NwLYZXWyxXroNzCYQddaB78kyEqBQm?iframeQuery=anchorId%3DX02mf8i0ugupa9gjf7jy89\">请至钉钉文档查看附件《基于医药知识图谱的智能问答系统的设计与实现.pdf》</a></p>\n<h2>详细解析</h2>\n<p>**</p>\n<p>类似的原文：图3-2</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/yBRq1ZPjkr7PKOdv/img/b962dd30-be99-44b4-aa87-574cee6e360e.png\" alt=\"image.png\"></p>\n<p><a href=\"https://alidocs.dingtalk.com/i/nodes/93NwLYZXWyxXroNzCYQddaB78kyEqBQm?iframeQuery=anchorId%3DX02mf8i0ugupa9gjf7jy89\">请至钉钉文档查看附件《基于医药知识图谱的智能问答系统的设计与实现.pdf》</a></p>\n",
      "keyPoints": [
        "理解题目中的核心技术概念",
        "掌握相关架构设计原理",
        "能够分析实际应用场景"
      ],
      "gradingRubric": [],
      "references": []
    },
    "tags": {
      "chapter": "2025-1",
      "difficulty": "hard",
      "domains": [
        "知识图谱",
        "人工智能"
      ],
      "keywords": [
        "知识图谱",
        "智能问答",
        "scrapy",
        "异步IO"
      ]
    },
    "estimatedTime": 45,
    "images": []
  },
  {
    "id": "case008",
    "title": "Redis主从复制与数据持久化",
    "type": "case-analysis",
    "content": "<h2>试题三：Redis</h2>\n<p>**问题1：**在 redis 主从复制，读写分离的架构中，主从库第一次同步的架构图如下，请填写图中空缺处。（10分）</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/yBRq1ZPjkr7PKOdv/img/798b85f4-85a9-41f3-9711-68ddec677f58.png\" alt=\"image.png\"></p>\n<p><strong>问题2</strong>：主从库第一次同步完成之后，后面如果有数据更新是如何同步的，请填写图中空缺处。（6分）</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/yBRq1ZPjkr7PKOdv/img/d4564066-9c6d-47c1-955d-ca36b8d41a99.png\" alt=\"image.png\"></p>\n<p><strong>问题3</strong>：数据持久化在系统非常重要，系统发生故障的时候需要进行数据恢复，请列举出 redis 中数据持久化的两种方式，并论述其优缺点。（9分）</p>\n<h3></h3>\n",
    "answer": {
      "content": "<h2>参考答案</h2>\n<p><strong>问题1</strong>：</p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/yBRq1ZPjkr7PKOdv/img/6e0050a0-3bd1-4358-876b-cbccada5fbaf.png\" alt=\"image.png\"></p>\n<p>（1）请求数据同步 </p>\n<p>（2）生成RDB</p>\n<p>（3）记录RDB期间的所有命令到repl_baklog</p>\n<p>（4）发送RDB文件</p>\n<p>（5）发送repl_baklog中的命令</p>\n<p><strong>问题2</strong>: </p>\n<p><img src=\"https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/yBRq1ZPjkr7PKOdv/img/565022bc-f724-4efc-869e-ac892a058078.png\" alt=\"image.png\"></p>\n<p>（1）去repl_baklog（<strong>复制积压缓冲区</strong>）中获取offset后的数据</p>\n<p>（2）发送offset后的命令</p>\n<p>（3）执行命令</p>\n<p><strong>问题3</strong>：Redis 提供 RDB 和 AOF 两种持久化机制，其核心区别与对比如下：</p>\n<ul>\n<li><strong>RDB (Redis Database) 原理</strong>：定时生成内存数据的二进制快照，保存为 dump.rdb 文件。</li>\n</ul>\n<p><strong>优点</strong></p>\n<p>高性能： 二进制压缩存储，恢复速度极快 （适合大数据量场景）</p>\n<p>低磁盘占用： RDB 文件紧凑（比 AOF 小 50%~70%）</p>\n<p>容灾友好 ：单文件备份，便于传输到异地（如SCP 到远程服务器）</p>\n<p>最小化阻塞： BGSAVE 仅 fork 瞬间阻塞（通常毫秒级）</p>\n<p><strong>缺点</strong></p>\n<p>数据丢失风险：两次备份间的数据可能丢失（如5分钟备份周期宕机，丢5分钟数据）</p>\n<p>Fork 内存开销 ：fork 子进程时内存翻倍（10GB数据一临时占用 20GB）</p>\n<p>实时性差：不支持秒级持久化（最低配置 save 60 10000 = 60 秒内 1万次改动才触发）</p>\n<ul>\n<li><strong>AOF (Append Only File）原理</strong>：记录所有写操作命令（文本格式），通过重放命令恢复数据。</li>\n</ul>\n<p><strong>优点</strong></p>\n<p>数据零丢失： 配置 appendfsync always 每次写命令刷盘（最高可靠性）</p>\n<p>可读性强：文本格式记录操作历史（可用于审计或手动修复）</p>\n<p>故障恢复灵活： 支持 redis-check-aof 工具修复损坏的 AOF 文件 </p>\n<p>自动重与压缩： BGREWRITEAOF 重写冗余命令（如100次 INCR -&gt; 1次 SET)</p>\n<p><strong>缺点</strong></p>\n<p>文件体积大：相同数据集 AOF 文件通常远大于 RDB（需定期重写压缩）</p>\n<p>恢复速度慢 ：重放命令比加载 RDB 慢数倍（10GB数据可能需要分钟级恢复）</p>\n<p>写入性能开销：always 模式每次写命令刷盘，性能下降 50%+</p>\n<p>潜在 Bug 风险： 重放 AOF 时若命令存在逻辑错误（如依赖中问状态），可能导致数据不一致</p>\n<p><strong>解析</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>持久化机制</th>\n<th>说明</th>\n<th>优点</th>\n<th>缺点</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>RDB（Redis Database）</td>\n<td>在指<strong>定的时间间隔内，将内存中的数据集快照写入磁盘</strong>，恢复时将快照文件直接读到内存。</td>\n<td>1. 适合大规模数据恢复<br>2. <strong>对性能影响小</strong>，fork子进程进行持久化，主进程继续处理请求<br>3. <strong>文件紧凑</strong>，适合备份和灾难恢复</td>\n<td>1. <strong>可能会丢失最后一次快照后的数据</strong><br>2. fork子进程时，内存不足可能影响性能<br>3. 保存RDB文件时，<strong>如果数据集大，时间会较长</strong></td>\n<td>1. <strong>可以容忍一定数据丢失</strong><br>2. <strong>大规模数据恢复场景</strong><br>3. 对数据恢复速度要求较高</td>\n</tr>\n<tr>\n<td>AOF（Append Only File）</td>\n<td><strong>以日志形式记录每个写操作，追加到AOF文件</strong>，重启时重新执行这些命令恢复数据。</td>\n<td>1. <strong>数据安全性高</strong>，可配置不同同步策略，最多丢失1秒数据<br>2. AOF文件是<strong>有序的写操作日志</strong>，易读，可修改修复</td>\n<td>1. <strong>AOF文件通常比RDB文件大</strong><br>2. <strong>性能比RDB稍差</strong>，因为要不断记录写操作<br>3. 恢复速度比RDB慢</td>\n<td>1. <strong>对数据安全性要求高</strong>，不能容忍数据丢失<br>2. <strong>对恢复速度要求不苛刻</strong></td>\n</tr>\n<tr>\n<td>RDB + AOF（版本4.0新增的机制）</td>\n<td><strong>同时使用RDB和AOF持久化。</strong></td>\n<td>兼具RDB和AOF的优点，既有RDB的快速恢复能力，又有AOF的数据安全性。</td>\n<td>1. 占用更多磁盘空间<br>2. 配置和管理相对复杂</td>\n<td><strong>对数据安全性和恢复速度都有较高要求的场景</strong></td>\n</tr>\n</tbody></table>\n",
      "keyPoints": [
        "理解题目中的核心技术概念",
        "掌握相关架构设计原理",
        "能够分析实际应用场景"
      ],
      "gradingRubric": [],
      "references": []
    },
    "tags": {
      "chapter": "2025-1",
      "difficulty": "medium",
      "domains": [
        "数据库系统",
        "分布式系统"
      ],
      "keywords": [
        "Redis",
        "主从复制",
        "数据持久化",
        "RDB",
        "AOF"
      ]
    },
    "estimatedTime": 40,
    "images": []
  },
  {
    "id": "case009",
    "title": "端侧AI资源池化设计",
    "type": "case-analysis",
    "content": "<h2>试题四： 端侧AI与云侧AI算力</h2>\n<p>近年来，Al技术得到快速发展，其技术促使了智能终端软硬架构的全面升级。云端Al 和端侧Al最大差别在于算力是在云侧，还是端侧计算的问题。某装备研制企业为了适应产品的智能化升级换代，要求研发部门开展端侧 Al技术的研究工作，王工主要承担了智能终端的资源池化设计工作，并就资源池的架构设计提出了自己的见解。在研发部门组织的讨论会上，王工的独到见解得到技术主管的认可。</p>\n<p>针对智能终端端侧 Al 的需求，王工在讨论会上提出，应开展资源池架构设计工作。资源池可高效管理和分配计算、存储和网络等资源，其核心目标是通过集中化管理、动态调度和自动化运维，提升资源利用率、弹性和可靠性。资源池架构设计除需要兼顾计算、存储、网络等资源的动态管理与优化外，同时应满足低延迟、高能效和隐私安全等核心需求。</p>\n<p><strong>问题1</strong>：（6分）请给出云侧 Al 和端侧Al 的定义，并说明端侧 Al 相比于云侧 Al 的优势是什么？</p>\n<p><strong>问题 2：</strong>（7分）资源池的核心架构设计需要考虑（a）资源抽象与异构计算、（b）动态调度与能效优化、(c)安全与隔离机制等三个方面，请判断下表中空（1）-（7）分别属于哪个方面，并使用 abc 进行填空。</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>设计方法</th>\n<th>类别</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>基于任务优先级、能耗调值和硬件亲和性（如 NPU 加速）动态分配资源</td>\n<td>(1)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>通过虚拟化或容器技术隔离多用户任务，防止资源争抢</td>\n<td>(2)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>将端侧设备的 CPU、GPU、 NPU 等异构算力统一抽象为虚拟资源池，屏蔽硬件差异，实现灵活调度</td>\n<td>(3)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>本地数据处理避免敏感信息上传云端，结合硬件级安全模块实现端到端加密</td>\n<td>(4)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>根据负载自动调整算力分配</td>\n<td>(5)</td>\n</tr>\n<tr>\n<td>6</td>\n<td>运行计算优化</td>\n<td>(6)</td>\n</tr>\n<tr>\n<td>7</td>\n<td>通过模型蒸馏、重化（应为量化）和稀疏编码压缩模型体积，适配端侧资源限制</td>\n<td>(7)</td>\n</tr>\n</tbody></table>\n<p><strong>问题3</strong>：关于集中式资源池、分布式资源池以及混合型资源池对比表如下，请填写表中空(1)-(6)。（12分）</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>集中式资源池</th>\n<th>分布式资源池</th>\n<th>混合型资源池</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>核心架构</td>\n<td>单中心化</td>\n<td>(1)</td>\n<td>融合架构</td>\n</tr>\n<tr>\n<td>资源调度与管理</td>\n<td>(2)</td>\n<td>分布式/联邦式管理</td>\n<td>统一视图，分层/分级管理</td>\n</tr>\n<tr>\n<td>数据存储</td>\n<td>中心节点存储</td>\n<td>分散存储</td>\n<td>(3)</td>\n</tr>\n<tr>\n<td>扩容能力</td>\n<td>低</td>\n<td>高</td>\n<td>(4)</td>\n</tr>\n<tr>\n<td>管理复杂性</td>\n<td>(5)</td>\n<td>高</td>\n<td>高</td>\n</tr>\n<tr>\n<td>规模</td>\n<td>高</td>\n<td>(6)</td>\n<td>高</td>\n</tr>\n</tbody></table>\n<p>因为集中式资源池实时性高，并且目前系统规模大，所以李工决定采用集中式资源池，但是王工指出李工的方案有三个缺陷。请你描述一下三个缺陷是什么？</p>\n<h3></h3>\n",
    "answer": {
      "content": "<h2>参考答案</h2>\n<p>**问题1：**云侧 AI：Al模型部署在云端服务器，终端设备通过网络传输数据至云端处理并返回结果。</p>\n<p>端侧 Al： Al模型直接部署在终端设备（手机汽车/IoT设备)，数据在本地完成计算。</p>\n<p>端侧 Al的优势：超低延迟（实时响应)、数据隐私和安全（原始数据本地处理，仅输出结果）、离线可用、带宽和成本低、能效提升（本地运算免传输，专用芯片能效高）</p>\n<p><strong>问题2</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>设计方法</th>\n<th>类别</th>\n<th>分类理由</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>基于任务优先级、能耗调值和硬件亲和性（如 NPU 加速）动态分配资源</td>\n<td>(1)b</td>\n<td>核心是动态资源分配，考虑优先级、能耗和硬件特性，属于动态调度与能效优化。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>通过虚拟化或容器技术隔离多用户任务，防止资源争抢</td>\n<td>(2)c</td>\n<td>直接涉及任务隔离，防止争抢，属于安全与隔离机制。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>将端侧设备的 CPU、GPU、 NPU 等异构算力统一抽象为虚拟资源池，屏蔽硬件差异，实现灵活调度</td>\n<td>(3)a</td>\n<td>核心是将异构硬件抽象为统一资源池，属于资源抽象与异构计算。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>本地数据处理避免敏感信息上传云端，结合硬件级安全模块实现端到端加密</td>\n<td>(4)c</td>\n<td>重点在数据安全和隐私保护（本地处理、加密），属于安全与隔离机制。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>根据负载自动调整算力分配</td>\n<td>(5)b</td>\n<td>基于负载动态调整资源，属于动态调度与能效优化。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>运行计算优化</td>\n<td>(6)b</td>\n<td>指运行时计算优化（如性能或能效优化），属于动态调度与能效优化的范畴。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>通过模型蒸馏、重化（应为量化）和稀疏编码压缩模型体积，适配端侧资源限制</td>\n<td>(7)b</td>\n<td>模型压缩技术（如蒸馏、量化、稀琉编码）旨在减少资源使用，优化能效，属于动态调度与能效优化。</td>\n</tr>\n</tbody></table>\n<p><strong>问题3</strong>：</p>\n<p>（1）多中心化或去中心化</p>\n<p>（2）集中管理</p>\n<p>（3）核心数据在中心，热数据或低延迟需求数据在边缘/本地。</p>\n<p>（4）高</p>\n<p>（5）低</p>\n<p>（6）低</p>\n<p>集中式资源池的三个缺点，其缺点如下，随便挑三个即可：</p>\n<ul>\n<li><p>单点故障风险：中心故障影响全局。</p>\n</li>\n<li><p>网络延迟高：远距离用户访问体验差。</p>\n</li>\n<li><p>带宽瓶颈：所有流量汇聚到中心，出口带宽压力大。</p>\n</li>\n<li><p>扩展限制：物理空间、电力、冷却可能限制单点扩展。</p>\n</li>\n<li><p>地理覆盖局限：难以满足全球用户的低延迟需求。</p>\n</li>\n</ul>\n",
      "keyPoints": [
        "理解题目中的核心技术概念",
        "掌握相关架构设计原理",
        "能够分析实际应用场景"
      ],
      "gradingRubric": [],
      "references": []
    },
    "tags": {
      "chapter": "2025-1",
      "difficulty": "hard",
      "domains": [
        "人工智能",
        "边缘计算"
      ],
      "keywords": [
        "端侧AI",
        "资源池化",
        "边缘计算"
      ]
    },
    "estimatedTime": 45,
    "images": []
  },
  {
    "id": "case010",
    "title": "区块链农产品溯源系统",
    "type": "case-analysis",
    "content": "<h2>试题五：区块链</h2>\n<p>题目背景是农产品溯源使用区块链</p>\n<p><strong>问题1</strong>：区块链的六个层次分别是什么，并简单介绍（12分）</p>\n<p><strong>问题2</strong>：在区块链系统中，有三种人员：信息填写人员、核对人员、审核人员，请用400 字以内文字说明三种不同人员的操作流程（9分）</p>\n<p><strong>问题3</strong>：介绍下什么是智能合约，并说明智能合约包含哪三方面（4分）</p>\n<h3></h3>\n",
    "answer": {
      "content": "<h2>参考答案</h2>\n<p>**问题1：**区块链技术体系可分为六个层级，通过多层协作实现去中心化特性与安全可信的运行机制：</p>\n<ul>\n<li><p>数据层：封装底层数据结构与安全技术，包含区块的链式结构、哈希函数、Merkle 树、时间戳及非对称加密技术, 确保数据不可篡改性和完整性。区块通过保存前序哈希值形成链式存储，交易数据采用双重加密保障隐私。</p>\n</li>\n<li><p>网络层：采用 P2P 组网技术构建分布式自治系统，节点通过传播机制同步新区块数据，依靠验证机制确认交易合法性。公有链、联盟链和私有链在该层实现不同级别的中心化控制。</p>\n</li>\n<li><p>共识层：集成 PoW. PoS、DPoS 等算法解决分布式网络记账权分配问题，通过超过 51%节点验证机制确保全网络账本一致性。共识机制直接影响系统的吞吐量与安全性。</p>\n</li>\n<li><p>激励层：设计经济模型驱动节点参与验证，如比特币的挖矿奖励和交易手续费机制。通过代币发行与分配规则维护网络生态的可持续性。</p>\n</li>\n<li><p>合约层：部署智能合约实现自动化执行，通过预编程脚本在满足条件时触发资产转移、合约清算等操作。以太坊等平台在该层扩展了图灵完备的编程能力。</p>\n</li>\n<li><p>应用层：面向具体场景开发DApp，涵盖金融支付（跨境结算）、供应链管理（农产品溯源）、数字身份等垂直领域。该层直接承载用户交互与业务逻辑实现。</p>\n</li>\n</ul>\n<p><strong>问题2</strong>：</p>\n<ol>\n<li><p><strong>信息填写人员</strong></p>\n<p>① 登录区块链系统录入农产品基础数据（批次、产地、检测报告等)；</p>\n<p>② 上传原始凭证（如检测机构盖章文件）至IPFS 分布式存储；</p>\n<p>③ 调用智能合约生成初始哈希值，将关键信息上链；</p>\n<p>④ 系统自动生成带时间戳的区块链存证编号。</p>\n</li>\n<li><p><strong>核对人员</strong></p>\n<p>① 接收系统推送的待核验数据包；</p>\n<p>② 比对上链数据与原始凭证的一致性（通过哈希值校验）；</p>\n<p>③ 实地抽查或视频核验生产环节真实性；</p>\n<p>④ 使用多重签名钱包对通过核验的数据包进行二级加密签名，触发智能合约进入审核队列。</p>\n</li>\n<li><p><strong>审核人员</strong></p>\n</li>\n</ol>\n<p>① 调取前两级操作的全流程区块链日志；</p>\n<p>② 复核数据修改记录（需超过2/3 节点共识）；</p>\n<p>③ 最终确认时激活时间锁功能，使该批次数据进入只读状态；</p>\n<p>④ 颁发可验证数字凭证 (VC)，同步至农业监管链节点。所有操作痕迹均通过非对称加密永久上链。</p>\n<p><strong>问题3</strong>: 智能合约是一种以代码形式编写的程序，存储在区块链上，用于自动执行合约条款，无需第三方介入。其核心作用包括自动化履约、确保交易透明性和不可篡改性。</p>\n<p>智能合约包含以下三方面：</p>\n<ul>\n<li><p>自动化履约：智能合约可以在满足预设条件时自动执行交易或协议，减少人工干预和信任成本。例如，在预付式消费场景中，消费者预付的资金可以通过智能合约锁定，按照服务进度分阶段释放给商家，确保资金安全。</p>\n</li>\n<li><p>透明性和不可篡改性：智能合约的代码是公开的，任何人都可以验证其内容和执行结果。此外，由于区块链的分布式账本和共识机制，一旦合约被记录在区块上，其内容就无法被篡改，保证了交易的不可篡改性。</p>\n</li>\n<li><p>去中心化和安全性：智能合约依赖于区块链的去中心化架构和加密技术，确保交易的安全性和可信度。合约代码部署在链上节点，满足条件时由网络节点通过共识机制验证并执行，将结果记录至区块</p>\n</li>\n</ul>\n",
      "keyPoints": [
        "理解题目中的核心技术概念",
        "掌握相关架构设计原理",
        "能够分析实际应用场景"
      ],
      "gradingRubric": [],
      "references": []
    },
    "tags": {
      "chapter": "2025-1",
      "difficulty": "hard",
      "domains": [
        "区块链",
        "供应链管理"
      ],
      "keywords": [
        "区块链",
        "溯源系统",
        "智能合约"
      ]
    },
    "estimatedTime": 50,
    "images": []
  }
];

export const caseAnalysisIndices = {
  "chapters": {
    "2025-1": [
      "case010",
      "case009",
      "case008",
      "case007",
      "case006"
    ],
    "2024-2": [
      "case005",
      "case004",
      "case003",
      "case002",
      "case001"
    ]
  },
  "difficulty": {
    "hard": [
      "case010",
      "case009",
      "case007",
      "case006",
      "case005",
      "case003",
      "case001"
    ],
    "medium": [
      "case008",
      "case004",
      "case002"
    ]
  },
  "domains": {
    "区块链": [
      "case010"
    ],
    "供应链管理": [
      "case010"
    ],
    "人工智能": [
      "case009",
      "case007",
      "case006"
    ],
    "边缘计算": [
      "case009"
    ],
    "数据库系统": [
      "case008",
      "case002"
    ],
    "分布式系统": [
      "case008"
    ],
    "知识图谱": [
      "case007"
    ],
    "软件架构": [
      "case006",
      "case001"
    ],
    "医疗信息系统": [
      "case005"
    ],
    "信息安全": [
      "case005"
    ],
    "搜索技术": [
      "case004"
    ],
    "Web应用": [
      "case004"
    ],
    "嵌入式系统": [
      "case003"
    ],
    "机器人技术": [
      "case003"
    ],
    "系统架构": [
      "case002"
    ],
    "系统设计": [
      "case001"
    ]
  },
  "paperType": {},
  "keywords": {
    "区块链": [
      "case010"
    ],
    "溯源系统": [
      "case010"
    ],
    "智能合约": [
      "case010"
    ],
    "端侧AI": [
      "case009"
    ],
    "资源池化": [
      "case009"
    ],
    "边缘计算": [
      "case009"
    ],
    "Redis": [
      "case008"
    ],
    "主从复制": [
      "case008"
    ],
    "数据持久化": [
      "case008"
    ],
    "RDB": [
      "case008"
    ],
    "AOF": [
      "case008"
    ],
    "知识图谱": [
      "case007"
    ],
    "智能问答": [
      "case007"
    ],
    "scrapy": [
      "case007"
    ],
    "异步IO": [
      "case007"
    ],
    "大模型": [
      "case006"
    ],
    "训练平台": [
      "case006"
    ],
    "质量属性场景": [
      "case006"
    ],
    "解释器架构": [
      "case006"
    ],
    "医疗系统": [
      "case005"
    ],
    "安全分析": [
      "case005"
    ],
    "嵌入式安全": [
      "case005"
    ],
    "Elasticsearch": [
      "case004"
    ],
    "分词": [
      "case004"
    ],
    "搜索引擎": [
      "case004"
    ],
    "ROS": [
      "case003"
    ],
    "机器人系统": [
      "case003"
    ],
    "嵌入式系统": [
      "case003"
    ],
    "缓存架构": [
      "case002"
    ],
    "cache-aside": [
      "case002"
    ],
    "数据库设计": [
      "case002"
    ],
    "质量属性": [
      "case001"
    ],
    "软件架构": [
      "case001"
    ],
    "场景分析": [
      "case001"
    ],
    "ATAM": [
      "case001"
    ]
  }
};

export const caseAnalysisDisplayMaps = {
  "chapters": {
    "2025-1": "2025-1",
    "2024-2": "2024-2"
  },
  "difficulty": {
    "hard": "困难",
    "medium": "中等"
  },
  "domains": {
    "区块链": "区块链",
    "供应链管理": "供应链管理",
    "人工智能": "人工智能",
    "边缘计算": "边缘计算",
    "数据库系统": "数据库系统",
    "分布式系统": "分布式系统",
    "知识图谱": "知识图谱",
    "软件架构": "软件架构",
    "医疗信息系统": "医疗信息系统",
    "信息安全": "信息安全",
    "搜索技术": "搜索技术",
    "Web应用": "Web应用",
    "嵌入式系统": "嵌入式系统",
    "机器人技术": "机器人技术",
    "系统架构": "系统架构",
    "系统设计": "系统设计"
  },
  "paperType": {},
  "keywords": {
    "区块链": "区块链",
    "溯源系统": "溯源系统",
    "智能合约": "智能合约",
    "端侧AI": "端侧AI",
    "资源池化": "资源池化",
    "边缘计算": "边缘计算",
    "Redis": "Redis",
    "主从复制": "主从复制",
    "数据持久化": "数据持久化",
    "RDB": "RDB",
    "AOF": "AOF",
    "知识图谱": "知识图谱",
    "智能问答": "智能问答",
    "scrapy": "scrapy",
    "异步IO": "异步IO",
    "大模型": "大模型",
    "训练平台": "训练平台",
    "质量属性场景": "质量属性场景",
    "解释器架构": "解释器架构",
    "医疗系统": "医疗系统",
    "安全分析": "安全分析",
    "嵌入式安全": "嵌入式安全",
    "Elasticsearch": "Elasticsearch",
    "分词": "分词",
    "搜索引擎": "搜索引擎",
    "ROS": "ROS",
    "机器人系统": "机器人系统",
    "嵌入式系统": "嵌入式系统",
    "缓存架构": "缓存架构",
    "cache-aside": "cache-aside",
    "数据库设计": "数据库设计",
    "质量属性": "质量属性",
    "软件架构": "软件架构",
    "场景分析": "场景分析",
    "ATAM": "ATAM"
  }
};

export const caseAnalysisMetadata = {
  "totalItems": 10,
  "lastUpdated": "2025-09-22T11:39:23.332Z",
  "categories": {
    "hard": 7,
    "medium": 3
  }
};
